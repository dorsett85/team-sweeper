package com.cphillipsdorsett.teamsweeper.game.dao;

import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import javax.transaction.Transactional;
import java.util.List;
import java.util.Optional;

/**
 * Class to Combine all of the methods of a spring autogenerated Repository,
 * e.g., "findById", but creates additional methods to run raw sql using an
 * EntityManager.
 */
@Repository
public class GameDao implements GameRepository {
    EntityManager em;
    GameRepository gameRepository;

    public GameDao(EntityManager entityManager, GameRepository gameRepository) {
        em = entityManager;
        this.gameRepository = gameRepository;
    }

    @Transactional
    public Game create(Game game) {
        em
            .createNativeQuery("" +
                "INSERT INTO game (difficulty, status, board) " +
                "VALUES (:difficulty, :status, :board)"
            )
            .setParameter("difficulty", game.difficulty)
            .setParameter("status", game.status.name())
            .setParameter("board", game.board)
            .executeUpdate();
        return (Game) em
            .createNativeQuery("" +
                "SELECT g.* " +
                "FROM game g " +
                "WHERE g.id = (SELECT LAST_INSERT_ID())",
                Game.class
            )
            .getSingleResult();
    }

    @Transactional
    public Game findCurrent(String sessionId, int gameId) {
        List<Game> results = (List<Game>) em
            .createNativeQuery("" +
                "SELECT g.* " +
                "FROM game g " +
                "INNER JOIN session_game sg ON g.id = sg.game_id " +
                "INNER JOIN SPRING_SESSION ss ON sg.session_id = ss.SESSION_ID " +
                "WHERE ss.SESSION_ID = :sessionId " +
                "   AND g.id = :gameId",
                Game.class
            )
            .setParameter("sessionId", sessionId)
            .setParameter("gameId", gameId)
            .getResultList();
        return results.isEmpty() ? null : results.get(0);
    }

    @Transactional
    public void update(Game game) {
        em.createNativeQuery("" +
            "UPDATE game g " +
            "SET g.board = :board " +
            "WHERE g.id = :gameId"
        )
        .setParameter("board", game.board)
        .setParameter("gameId", game.id)
        .executeUpdate();
    }

    @Override
    public <S extends Game> S save(S entity) {
        return gameRepository.save(entity);
    }

    @Override
    public <S extends Game> Iterable<S> saveAll(Iterable<S> entities) {
        return gameRepository.saveAll(entities);
    }

    @Override
    public Optional<Game> findById(Integer integer) {
        return gameRepository.findById(integer);
    }

    @Override
    public boolean existsById(Integer integer) {
        return gameRepository.existsById(integer);
    }

    @Override
    public Iterable<Game> findAll() {
        return gameRepository.findAll();
    }

    @Override
    public Iterable<Game> findAllById(Iterable<Integer> integers) {
        return gameRepository.findAllById(integers);
    }

    @Override
    public long count() {
        return gameRepository.count();
    }

    @Override
    public void deleteById(Integer integer) {
        gameRepository.deleteById(integer);
    }

    @Override
    public void delete(Game entity) {
        gameRepository.delete(entity);
    }

    @Override
    public void deleteAll(Iterable<? extends Game> entities) {
        gameRepository.deleteAll(entities);
    }

    @Override
    public void deleteAll() {
        gameRepository.deleteAll();
    }
}
